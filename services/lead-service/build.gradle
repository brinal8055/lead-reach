plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.3.2"
    id("com.google.protobuf") version "0.9.4"
}

version = "0.1"
group = "com.leadreach"

repositories {
    mavenCentral()
}


dependencies {
    annotationProcessor("io.micronaut:micronaut-http-validation")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.grpc:micronaut-grpc-runtime")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("javax.annotation:javax.annotation-api:1.3.2")
    
    // gRPC dependencies
    implementation("io.grpc:grpc-netty:1.62.2")
    implementation("io.grpc:grpc-protobuf:1.62.2")
    implementation("io.grpc:grpc-stub:1.62.2")
    implementation("io.grpc:grpc-services:1.62.2")  // For reflection service
    
    // Database dependencies
    implementation("io.micronaut.data:micronaut-data-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("mysql:mysql-connector-java:8.0.33")
    
    // JDBI dependencies
    implementation("org.jdbi:jdbi3-core:3.41.3")
    implementation("org.jdbi:jdbi3-sqlobject:3.41.3")
    implementation("org.jdbi:jdbi3-json:3.41.3")
    
    // Lombok
    compileOnly("org.projectlombok:lombok:1.18.30")
    annotationProcessor("org.projectlombok:lombok:1.18.30")

    // Add Flyway with MySQL 8.0 support
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("org.flywaydb:flyway-core:9.22.3")
    implementation("org.flywaydb:flyway-mysql:9.22.3")

    runtimeOnly("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    
    // Add snakeyaml for YAML configuration
    runtimeOnly("org.yaml:snakeyaml")
    
    compileOnly("io.micronaut:micronaut-http-client")
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("io.micronaut:micronaut-http-client")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:dynalite")
}

application {
    mainClass.set("com.leadreach.Application")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.leadreach.*")
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.24.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.59.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Copy proto files to the expected location - only if not in Docker
task copyProtoFiles {
    onlyIf {
        !project.hasProperty('skipProtoFileCopy') && !System.getenv('DOCKER_BUILD')
    }
    doLast {
        copy {
            from '../../../proto'
            into 'src/main/proto'
            includeEmptyDirs = false
        }
    }
}

// Make sure proto files are copied before compiling, generating proto, and processing resources
tasks.compileJava.dependsOn(copyProtoFiles)
tasks.generateProto.dependsOn(copyProtoFiles)
tasks.processResources.dependsOn(copyProtoFiles)
